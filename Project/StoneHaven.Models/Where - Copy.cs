//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_PriceBase PriceBase {
            get {
                return new Root_Query_PriceBase();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.EdgePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_EdgePrice EdgePrice {
            get {
                return new Root_Query_EdgePrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.ColorGroupPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_ColorGroupPrice ColorGroupPrice {
            get {
                return new Root_Query_ColorGroupPrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.SinkPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_SinkPrice SinkPrice {
            get {
                return new Root_Query_SinkPrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.StovePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_StovePrice StovePrice {
            get {
                return new Root_Query_StovePrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.ThicknesPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_ThicknesPrice ThicknesPrice {
            get {
                return new Root_Query_ThicknesPrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_PriceBase<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_PriceBase..ctor
            /// </summary>
            public Query_PriceBase() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase..ctor
            /// </summary>
            public Query_PriceBase(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase..ctor
            /// </summary>
            public Query_PriceBase(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Price {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Price", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> SupplyPrice {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "SupplyPrice", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> SupplyAndInstallPrice {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "SupplyAndInstallPrice", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual Query_Company<T1> Company {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Company");
                    Query_Company<T1> child = new Query_Company<T1>(null, "Company", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_PriceBase.
            /// </summary>
            public virtual Query_Project<T1> Project {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Project");
                    Query_Project<T1> child = new Query_Project<T1>(null, "Project", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_PriceBase : Query_PriceBase<StoneHaven.Models.PriceBase> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_EdgePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_EdgePrice<T2> : Query_PriceBase<T2>
         {
            
            /// <summary>
            /// Query helper for member Query_EdgePrice..ctor
            /// </summary>
            public Query_EdgePrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_EdgePrice..ctor
            /// </summary>
            public Query_EdgePrice(QueryBuilder<T2> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_EdgePrice..ctor
            /// </summary>
            public Query_EdgePrice(QueryBuilder<T2> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_EdgePrice.
            /// </summary>
            public virtual Query_Edge<T2> Entity {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Entity");
                    Query_Edge<T2> child = new Query_Edge<T2>(null, "Entity", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_EdgePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_EdgePrice : Query_EdgePrice<StoneHaven.Models.EdgePrice> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_ColorGroupPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_ColorGroupPrice<T3> : Query_PriceBase<T3>
         {
            
            /// <summary>
            /// Query helper for member Query_ColorGroupPrice..ctor
            /// </summary>
            public Query_ColorGroupPrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroupPrice..ctor
            /// </summary>
            public Query_ColorGroupPrice(QueryBuilder<T3> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroupPrice..ctor
            /// </summary>
            public Query_ColorGroupPrice(QueryBuilder<T3> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroupPrice.
            /// </summary>
            public virtual Query_ColorGroup<T3> Entity {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Entity");
                    Query_ColorGroup<T3> child = new Query_ColorGroup<T3>(null, "Entity", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_ColorGroupPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_ColorGroupPrice : Query_ColorGroupPrice<StoneHaven.Models.ColorGroupPrice> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_SinkPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_SinkPrice<T4> : Query_PriceBase<T4>
         {
            
            /// <summary>
            /// Query helper for member Query_SinkPrice..ctor
            /// </summary>
            public Query_SinkPrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_SinkPrice..ctor
            /// </summary>
            public Query_SinkPrice(QueryBuilder<T4> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_SinkPrice..ctor
            /// </summary>
            public Query_SinkPrice(QueryBuilder<T4> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_SinkPrice.
            /// </summary>
            public virtual Query_Sink<T4> Entity {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Entity");
                    Query_Sink<T4> child = new Query_Sink<T4>(null, "Entity", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_SinkPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_SinkPrice : Query_SinkPrice<StoneHaven.Models.SinkPrice> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_StovePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_StovePrice<T5> : Query_PriceBase<T5>
         {
            
            /// <summary>
            /// Query helper for member Query_StovePrice..ctor
            /// </summary>
            public Query_StovePrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_StovePrice..ctor
            /// </summary>
            public Query_StovePrice(QueryBuilder<T5> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_StovePrice..ctor
            /// </summary>
            public Query_StovePrice(QueryBuilder<T5> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_StovePrice.
            /// </summary>
            public virtual Query_Stove<T5> Entity {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Entity");
                    Query_Stove<T5> child = new Query_Stove<T5>(null, "Entity", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_StovePrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_StovePrice : Query_StovePrice<StoneHaven.Models.StovePrice> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_ThicknesPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_ThicknesPrice<T6> : Query_PriceBase<T6>
         {
            
            /// <summary>
            /// Query helper for member Query_ThicknesPrice..ctor
            /// </summary>
            public Query_ThicknesPrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_ThicknesPrice..ctor
            /// </summary>
            public Query_ThicknesPrice(QueryBuilder<T6> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_ThicknesPrice..ctor
            /// </summary>
            public Query_ThicknesPrice(QueryBuilder<T6> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_ThicknesPrice.
            /// </summary>
            public virtual Query_Thicknes<T6> Entity {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Entity");
                    Query_Thicknes<T6> child = new Query_Thicknes<T6>(null, "Entity", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_ThicknesPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_ThicknesPrice : Query_ThicknesPrice<StoneHaven.Models.ThicknesPrice> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class PriceBase {
            
            /// <summary>
            /// Query helper for member PriceBase.Price
            /// </summary>
            public static OrderByClause Price {
                get {
                    return new OrderByClause("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyPrice
            /// </summary>
            public static OrderByClause SupplyPrice {
                get {
                    return new OrderByClause("SupplyPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyAndInstallPrice
            /// </summary>
            public static OrderByClause SupplyAndInstallPrice {
                get {
                    return new OrderByClause("SupplyAndInstallPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class PriceBase {
            
            /// <summary>
            /// Query helper for member PriceBase.Price
            /// </summary>
            public static NumericPropertyProjectionBuilder Price {
                get {
                    return new NumericPropertyProjectionBuilder("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyPrice
            /// </summary>
            public static NumericPropertyProjectionBuilder SupplyPrice {
                get {
                    return new NumericPropertyProjectionBuilder("SupplyPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyAndInstallPrice
            /// </summary>
            public static NumericPropertyProjectionBuilder SupplyAndInstallPrice {
                get {
                    return new NumericPropertyProjectionBuilder("SupplyAndInstallPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.PriceBase
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class PriceBase {
            
            /// <summary>
            /// Query helper for member PriceBase.Price
            /// </summary>
            public static NHibernate.Criterion.IProjection Price {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyPrice
            /// </summary>
            public static NHibernate.Criterion.IProjection SupplyPrice {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("SupplyPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.SupplyAndInstallPrice
            /// </summary>
            public static NHibernate.Criterion.IProjection SupplyAndInstallPrice {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("SupplyAndInstallPrice");
                }
            }
            
            /// <summary>
            /// Query helper for member PriceBase.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_QuoteItem QuoteItem {
            get {
                return new Root_Query_QuoteItem();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_QuoteItem<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_QuoteItem..ctor
            /// </summary>
            public Query_QuoteItem() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem..ctor
            /// </summary>
            public Query_QuoteItem(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem..ctor
            /// </summary>
            public Query_QuoteItem(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> NumberOfSinks {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "NumberOfSinks", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Bumpouts {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Bumpouts", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Arches {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Arches", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Adjustment {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Adjustment", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> SupplyType {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "SupplyType", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Project<T1> Project {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Project");
                    Query_Project<T1> child = new Query_Project<T1>(null, "Project", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Quotation<T1> Quotation {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Quotation");
                    Query_Quotation<T1> child = new Query_Quotation<T1>(null, "Quotation", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_ColorGroup<T1> ColorGroup {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "ColorGroup");
                    Query_ColorGroup<T1> child = new Query_ColorGroup<T1>(null, "ColorGroup", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Edge<T1> Edge {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Edge");
                    Query_Edge<T1> child = new Query_Edge<T1>(null, "Edge", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Thicknes<T1> Thicknes {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Thicknes");
                    Query_Thicknes<T1> child = new Query_Thicknes<T1>(null, "Thicknes", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Sink<T1> Sink {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Sink");
                    Query_Sink<T1> child = new Query_Sink<T1>(null, "Sink", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_QuoteItem.
            /// </summary>
            public virtual Query_Stove<T1> Stove {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Stove");
                    Query_Stove<T1> child = new Query_Stove<T1>(null, "Stove", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_CounterMeasurements CounterMeasurements {
                get {
                    string temp = associationPath;
                    temp = (temp + ".CounterMeasurements");
                    return new Query_Collection_CounterMeasurements(this, "CounterMeasurements", temp);
                }
            }
            
            public virtual Query_Collection_BackSplashMeasurements BackSplashMeasurements {
                get {
                    string temp = associationPath;
                    temp = (temp + ".BackSplashMeasurements");
                    return new Query_Collection_BackSplashMeasurements(this, "BackSplashMeasurements", temp);
                }
            }
            
            public virtual Query_Collection_EdgeMeasurements EdgeMeasurements {
                get {
                    string temp = associationPath;
                    temp = (temp + ".EdgeMeasurements");
                    return new Query_Collection_EdgeMeasurements(this, "EdgeMeasurements", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_CounterMeasurements : CollectionQueryBuilder<T1> {
                
                public Query_Collection_CounterMeasurements(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_CounterMeasurement<T1> With() {
                    Query_CounterMeasurement<T1> query = new Query_CounterMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_CounterMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_CounterMeasurement<T1> query = new Query_CounterMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_CounterMeasurement<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_CounterMeasurement<T1> query = new Query_CounterMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_CounterMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_CounterMeasurement<T1> query = new Query_CounterMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_BackSplashMeasurements : CollectionQueryBuilder<T1> {
                
                public Query_Collection_BackSplashMeasurements(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_BackSplashMeasurement<T1> With() {
                    Query_BackSplashMeasurement<T1> query = new Query_BackSplashMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_BackSplashMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_BackSplashMeasurement<T1> query = new Query_BackSplashMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_BackSplashMeasurement<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_BackSplashMeasurement<T1> query = new Query_BackSplashMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_BackSplashMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_BackSplashMeasurement<T1> query = new Query_BackSplashMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_EdgeMeasurements : CollectionQueryBuilder<T1> {
                
                public Query_Collection_EdgeMeasurements(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_EdgeMeasurement<T1> With() {
                    Query_EdgeMeasurement<T1> query = new Query_EdgeMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgeMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_EdgeMeasurement<T1> query = new Query_EdgeMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgeMeasurement<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_EdgeMeasurement<T1> query = new Query_EdgeMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgeMeasurement<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_EdgeMeasurement<T1> query = new Query_EdgeMeasurement<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_QuoteItem : Query_QuoteItem<StoneHaven.Models.QuoteItem> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class QuoteItem {
            
            /// <summary>
            /// Query helper for member QuoteItem.NumberOfSinks
            /// </summary>
            public static OrderByClause NumberOfSinks {
                get {
                    return new OrderByClause("NumberOfSinks");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Bumpouts
            /// </summary>
            public static OrderByClause Bumpouts {
                get {
                    return new OrderByClause("Bumpouts");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Arches
            /// </summary>
            public static OrderByClause Arches {
                get {
                    return new OrderByClause("Arches");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Adjustment
            /// </summary>
            public static OrderByClause Adjustment {
                get {
                    return new OrderByClause("Adjustment");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.SupplyType
            /// </summary>
            public static OrderByClause SupplyType {
                get {
                    return new OrderByClause("SupplyType");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class QuoteItem {
            
            /// <summary>
            /// Query helper for member QuoteItem.NumberOfSinks
            /// </summary>
            public static NumericPropertyProjectionBuilder NumberOfSinks {
                get {
                    return new NumericPropertyProjectionBuilder("NumberOfSinks");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Bumpouts
            /// </summary>
            public static NumericPropertyProjectionBuilder Bumpouts {
                get {
                    return new NumericPropertyProjectionBuilder("Bumpouts");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Arches
            /// </summary>
            public static NumericPropertyProjectionBuilder Arches {
                get {
                    return new NumericPropertyProjectionBuilder("Arches");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Adjustment
            /// </summary>
            public static NumericPropertyProjectionBuilder Adjustment {
                get {
                    return new NumericPropertyProjectionBuilder("Adjustment");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.SupplyType
            /// </summary>
            public static NumericPropertyProjectionBuilder SupplyType {
                get {
                    return new NumericPropertyProjectionBuilder("SupplyType");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.QuoteItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class QuoteItem {
            
            /// <summary>
            /// Query helper for member QuoteItem.NumberOfSinks
            /// </summary>
            public static NHibernate.Criterion.IProjection NumberOfSinks {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("NumberOfSinks");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Bumpouts
            /// </summary>
            public static NHibernate.Criterion.IProjection Bumpouts {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Bumpouts");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Arches
            /// </summary>
            public static NHibernate.Criterion.IProjection Arches {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Arches");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Adjustment
            /// </summary>
            public static NHibernate.Criterion.IProjection Adjustment {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Adjustment");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.SupplyType
            /// </summary>
            public static NHibernate.Criterion.IProjection SupplyType {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("SupplyType");
                }
            }
            
            /// <summary>
            /// Query helper for member QuoteItem.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Company Company {
            get {
                return new Root_Query_Company();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Company<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Company..ctor
            /// </summary>
            public Query_Company() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Company..ctor
            /// </summary>
            public Query_Company(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Company..ctor
            /// </summary>
            public Query_Company(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Address {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Address", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Phone {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Phone", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Fax {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Fax", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Email {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Email", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Company.
            /// </summary>
            public virtual Query_Company<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Company<T1> child = new Query_Company<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Company : Query_Company<StoneHaven.Models.Company> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Company {
            
            /// <summary>
            /// Query helper for member Company.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Address
            /// </summary>
            public static OrderByClause Address {
                get {
                    return new OrderByClause("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Phone
            /// </summary>
            public static OrderByClause Phone {
                get {
                    return new OrderByClause("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Fax
            /// </summary>
            public static OrderByClause Fax {
                get {
                    return new OrderByClause("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Email
            /// </summary>
            public static OrderByClause Email {
                get {
                    return new OrderByClause("Email");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Company {
            
            /// <summary>
            /// Query helper for member Company.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Address
            /// </summary>
            public static PropertyProjectionBuilder Address {
                get {
                    return new PropertyProjectionBuilder("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Phone
            /// </summary>
            public static PropertyProjectionBuilder Phone {
                get {
                    return new PropertyProjectionBuilder("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Fax
            /// </summary>
            public static PropertyProjectionBuilder Fax {
                get {
                    return new PropertyProjectionBuilder("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Email
            /// </summary>
            public static PropertyProjectionBuilder Email {
                get {
                    return new PropertyProjectionBuilder("Email");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Company
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Company {
            
            /// <summary>
            /// Query helper for member Company.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Address
            /// </summary>
            public static NHibernate.Criterion.IProjection Address {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Phone
            /// </summary>
            public static NHibernate.Criterion.IProjection Phone {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Fax
            /// </summary>
            public static NHibernate.Criterion.IProjection Fax {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Email
            /// </summary>
            public static NHibernate.Criterion.IProjection Email {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Email");
                }
            }
            
            /// <summary>
            /// Query helper for member Company.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Thicknes Thicknes {
            get {
                return new Root_Query_Thicknes();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Thicknes<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Thicknes..ctor
            /// </summary>
            public Query_Thicknes() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes..ctor
            /// </summary>
            public Query_Thicknes(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes..ctor
            /// </summary>
            public Query_Thicknes(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Thicknes.
            /// </summary>
            public virtual Query_Thicknes<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Thicknes<T1> child = new Query_Thicknes<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            public virtual Query_Collection_Prices Prices {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Prices");
                    return new Query_Collection_Prices(this, "Prices", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Thicknes<T1> With() {
                    Query_Thicknes<T1> query = new Query_Thicknes<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Thicknes<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Thicknes<T1> query = new Query_Thicknes<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Thicknes<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Thicknes<T1> query = new Query_Thicknes<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Thicknes<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Thicknes<T1> query = new Query_Thicknes<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Prices : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Prices(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_ThicknesPrice<T1> With() {
                    Query_ThicknesPrice<T1> query = new Query_ThicknesPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ThicknesPrice<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_ThicknesPrice<T1> query = new Query_ThicknesPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ThicknesPrice<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_ThicknesPrice<T1> query = new Query_ThicknesPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ThicknesPrice<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_ThicknesPrice<T1> query = new Query_ThicknesPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Thicknes : Query_Thicknes<StoneHaven.Models.Thicknes> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Thicknes {
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Thicknes {
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Thicknes
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Thicknes {
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Thicknes.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Quotation Quotation {
            get {
                return new Root_Query_Quotation();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Quotation<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Quotation..ctor
            /// </summary>
            public Query_Quotation() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation..ctor
            /// </summary>
            public Query_Quotation(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation..ctor
            /// </summary>
            public Query_Quotation(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> QuoteNr {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "QuoteNr", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CompanyAtt {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CompanyAtt", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Date {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Date", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Deleted {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Deleted", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual Query_Company<T1> Company {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Company");
                    Query_Company<T1> child = new Query_Company<T1>(null, "Company", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Quotation.
            /// </summary>
            public virtual Query_Customer<T1> Customer {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Customer");
                    Query_Customer<T1> child = new Query_Customer<T1>(null, "Customer", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_QuoteItems QuoteItems {
                get {
                    string temp = associationPath;
                    temp = (temp + ".QuoteItems");
                    return new Query_Collection_QuoteItems(this, "QuoteItems", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_QuoteItems : CollectionQueryBuilder<T1> {
                
                public Query_Collection_QuoteItems(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_QuoteItem<T1> With() {
                    Query_QuoteItem<T1> query = new Query_QuoteItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_QuoteItem<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_QuoteItem<T1> query = new Query_QuoteItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_QuoteItem<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_QuoteItem<T1> query = new Query_QuoteItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_QuoteItem<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_QuoteItem<T1> query = new Query_QuoteItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Quotation : Query_Quotation<StoneHaven.Models.Quotation> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Quotation {
            
            /// <summary>
            /// Query helper for member Quotation.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.QuoteNr
            /// </summary>
            public static OrderByClause QuoteNr {
                get {
                    return new OrderByClause("QuoteNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CompanyAtt
            /// </summary>
            public static OrderByClause CompanyAtt {
                get {
                    return new OrderByClause("CompanyAtt");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Date
            /// </summary>
            public static OrderByClause Date {
                get {
                    return new OrderByClause("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Deleted
            /// </summary>
            public static OrderByClause Deleted {
                get {
                    return new OrderByClause("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Quotation {
            
            /// <summary>
            /// Query helper for member Quotation.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.QuoteNr
            /// </summary>
            public static NumericPropertyProjectionBuilder QuoteNr {
                get {
                    return new NumericPropertyProjectionBuilder("QuoteNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CompanyAtt
            /// </summary>
            public static PropertyProjectionBuilder CompanyAtt {
                get {
                    return new PropertyProjectionBuilder("CompanyAtt");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Date
            /// </summary>
            public static PropertyProjectionBuilder Date {
                get {
                    return new PropertyProjectionBuilder("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Deleted
            /// </summary>
            public static PropertyProjectionBuilder Deleted {
                get {
                    return new PropertyProjectionBuilder("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Quotation
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Quotation {
            
            /// <summary>
            /// Query helper for member Quotation.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.QuoteNr
            /// </summary>
            public static NHibernate.Criterion.IProjection QuoteNr {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("QuoteNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.CompanyAtt
            /// </summary>
            public static NHibernate.Criterion.IProjection CompanyAtt {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CompanyAtt");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Date
            /// </summary>
            public static NHibernate.Criterion.IProjection Date {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Deleted
            /// </summary>
            public static NHibernate.Criterion.IProjection Deleted {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Quotation.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_ProjectPrice ProjectPrice {
            get {
                return new Root_Query_ProjectPrice();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Arche
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Arche Arche {
            get {
                return new Root_Query_Arche();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.SupplyAndInstall
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_SupplyAndInstall SupplyAndInstall {
            get {
                return new Root_Query_SupplyAndInstall();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Bumpout
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Bumpout Bumpout {
            get {
                return new Root_Query_Bumpout();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Supply
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Supply Supply {
            get {
                return new Root_Query_Supply();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_ProjectPrice<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_ProjectPrice..ctor
            /// </summary>
            public Query_ProjectPrice() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_ProjectPrice..ctor
            /// </summary>
            public Query_ProjectPrice(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_ProjectPrice..ctor
            /// </summary>
            public Query_ProjectPrice(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_ProjectPrice.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Price {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Price", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ProjectPrice.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_ProjectPrice : Query_ProjectPrice<StoneHaven.Models.ProjectPrice> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Arche
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Arche<T2> : Query_ProjectPrice<T2>
         {
            
            /// <summary>
            /// Query helper for member Query_Arche..ctor
            /// </summary>
            public Query_Arche() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Arche..ctor
            /// </summary>
            public Query_Arche(QueryBuilder<T2> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Arche..ctor
            /// </summary>
            public Query_Arche(QueryBuilder<T2> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Arche
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Arche : Query_Arche<StoneHaven.Models.Arche> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_SupplyAndInstall
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_SupplyAndInstall<T3> : Query_ProjectPrice<T3>
         {
            
            /// <summary>
            /// Query helper for member Query_SupplyAndInstall..ctor
            /// </summary>
            public Query_SupplyAndInstall() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_SupplyAndInstall..ctor
            /// </summary>
            public Query_SupplyAndInstall(QueryBuilder<T3> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_SupplyAndInstall..ctor
            /// </summary>
            public Query_SupplyAndInstall(QueryBuilder<T3> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_SupplyAndInstall
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_SupplyAndInstall : Query_SupplyAndInstall<StoneHaven.Models.SupplyAndInstall> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Bumpout
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Bumpout<T4> : Query_ProjectPrice<T4>
         {
            
            /// <summary>
            /// Query helper for member Query_Bumpout..ctor
            /// </summary>
            public Query_Bumpout() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Bumpout..ctor
            /// </summary>
            public Query_Bumpout(QueryBuilder<T4> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Bumpout..ctor
            /// </summary>
            public Query_Bumpout(QueryBuilder<T4> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Bumpout
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Bumpout : Query_Bumpout<StoneHaven.Models.Bumpout> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Supply
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Supply<T5> : Query_ProjectPrice<T5>
         {
            
            /// <summary>
            /// Query helper for member Query_Supply..ctor
            /// </summary>
            public Query_Supply() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Supply..ctor
            /// </summary>
            public Query_Supply(QueryBuilder<T5> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Supply..ctor
            /// </summary>
            public Query_Supply(QueryBuilder<T5> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Supply
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Supply : Query_Supply<StoneHaven.Models.Supply> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ProjectPrice {
            
            /// <summary>
            /// Query helper for member ProjectPrice.Price
            /// </summary>
            public static OrderByClause Price {
                get {
                    return new OrderByClause("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member ProjectPrice.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ProjectPrice {
            
            /// <summary>
            /// Query helper for member ProjectPrice.Price
            /// </summary>
            public static NumericPropertyProjectionBuilder Price {
                get {
                    return new NumericPropertyProjectionBuilder("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member ProjectPrice.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.ProjectPrice
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ProjectPrice {
            
            /// <summary>
            /// Query helper for member ProjectPrice.Price
            /// </summary>
            public static NHibernate.Criterion.IProjection Price {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Price");
                }
            }
            
            /// <summary>
            /// Query helper for member ProjectPrice.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Project Project {
            get {
                return new Root_Query_Project();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Project<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Project..ctor
            /// </summary>
            public Query_Project() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Project..ctor
            /// </summary>
            public Query_Project(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Project..ctor
            /// </summary>
            public Query_Project(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual Query_Project<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Project<T1> child = new Query_Project<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual Query_Bumpout<T1> BumpoutPrice {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "BumpoutPrice");
                    Query_Bumpout<T1> child = new Query_Bumpout<T1>(null, "BumpoutPrice", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Project.
            /// </summary>
            public virtual Query_Arche<T1> ArchePrice {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "ArchePrice");
                    Query_Arche<T1> child = new Query_Arche<T1>(null, "ArchePrice", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Project<T1> With() {
                    Query_Project<T1> query = new Query_Project<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Project<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Project<T1> query = new Query_Project<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Project<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Project<T1> query = new Query_Project<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Project<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Project<T1> query = new Query_Project<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Project : Query_Project<StoneHaven.Models.Project> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Project {
            
            /// <summary>
            /// Query helper for member Project.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Project {
            
            /// <summary>
            /// Query helper for member Project.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Project
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Project {
            
            /// <summary>
            /// Query helper for member Project.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Project.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_User User {
            get {
                return new Root_Query_User();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_User<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_User..ctor
            /// </summary>
            public Query_User() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_User..ctor
            /// </summary>
            public Query_User(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_User..ctor
            /// </summary>
            public Query_User(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> UserName {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "UserName", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Password {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Password", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual Query_User<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_User<T1> child = new Query_User<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_User.
            /// </summary>
            public virtual Query_Role<T1> Role {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Role");
                    Query_Role<T1> child = new Query_Role<T1>(null, "Role", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_User : Query_User<StoneHaven.Models.User> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class User {
            
            /// <summary>
            /// Query helper for member User.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member User.UserName
            /// </summary>
            public static OrderByClause UserName {
                get {
                    return new OrderByClause("UserName");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Password
            /// </summary>
            public static OrderByClause Password {
                get {
                    return new OrderByClause("Password");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class User {
            
            /// <summary>
            /// Query helper for member User.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member User.UserName
            /// </summary>
            public static PropertyProjectionBuilder UserName {
                get {
                    return new PropertyProjectionBuilder("UserName");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Password
            /// </summary>
            public static PropertyProjectionBuilder Password {
                get {
                    return new PropertyProjectionBuilder("Password");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.User
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class User {
            
            /// <summary>
            /// Query helper for member User.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member User.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member User.UserName
            /// </summary>
            public static NHibernate.Criterion.IProjection UserName {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("UserName");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Password
            /// </summary>
            public static NHibernate.Criterion.IProjection Password {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Password");
                }
            }
            
            /// <summary>
            /// Query helper for member User.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Role Role {
            get {
                return new Root_Query_Role();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Role<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Role..ctor
            /// </summary>
            public Query_Role() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Role..ctor
            /// </summary>
            public Query_Role(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Role..ctor
            /// </summary>
            public Query_Role(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Role.
            /// </summary>
            public virtual Query_Role<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Role<T1> child = new Query_Role<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Role : Query_Role<StoneHaven.Models.Role> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Role
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Role {
            
            /// <summary>
            /// Query helper for member Role.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Role.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Stove Stove {
            get {
                return new Root_Query_Stove();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Stove<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Stove..ctor
            /// </summary>
            public Query_Stove() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Stove..ctor
            /// </summary>
            public Query_Stove(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Stove..ctor
            /// </summary>
            public Query_Stove(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Stove.
            /// </summary>
            public virtual Query_Stove<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Stove<T1> child = new Query_Stove<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            public virtual Query_Collection_Prices Prices {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Prices");
                    return new Query_Collection_Prices(this, "Prices", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Stove<T1> With() {
                    Query_Stove<T1> query = new Query_Stove<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Stove<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Stove<T1> query = new Query_Stove<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Stove<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Stove<T1> query = new Query_Stove<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Stove<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Stove<T1> query = new Query_Stove<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Prices : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Prices(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_StovePrice<T1> With() {
                    Query_StovePrice<T1> query = new Query_StovePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_StovePrice<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_StovePrice<T1> query = new Query_StovePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_StovePrice<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_StovePrice<T1> query = new Query_StovePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_StovePrice<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_StovePrice<T1> query = new Query_StovePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Stove : Query_Stove<StoneHaven.Models.Stove> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Stove {
            
            /// <summary>
            /// Query helper for member Stove.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Stove {
            
            /// <summary>
            /// Query helper for member Stove.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Stove
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Stove {
            
            /// <summary>
            /// Query helper for member Stove.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Stove.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Edge Edge {
            get {
                return new Root_Query_Edge();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Edge<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Edge..ctor
            /// </summary>
            public Query_Edge() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Edge..ctor
            /// </summary>
            public Query_Edge(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Edge..ctor
            /// </summary>
            public Query_Edge(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Edge.
            /// </summary>
            public virtual Query_Edge<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Edge<T1> child = new Query_Edge<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            public virtual Query_Collection_Prices Prices {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Prices");
                    return new Query_Collection_Prices(this, "Prices", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Edge<T1> With() {
                    Query_Edge<T1> query = new Query_Edge<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Edge<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Edge<T1> query = new Query_Edge<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Edge<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Edge<T1> query = new Query_Edge<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Edge<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Edge<T1> query = new Query_Edge<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Prices : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Prices(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_EdgePrice<T1> With() {
                    Query_EdgePrice<T1> query = new Query_EdgePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgePrice<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_EdgePrice<T1> query = new Query_EdgePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgePrice<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_EdgePrice<T1> query = new Query_EdgePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_EdgePrice<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_EdgePrice<T1> query = new Query_EdgePrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Edge : Query_Edge<StoneHaven.Models.Edge> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Edge {
            
            /// <summary>
            /// Query helper for member Edge.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Edge {
            
            /// <summary>
            /// Query helper for member Edge.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Edge
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Edge {
            
            /// <summary>
            /// Query helper for member Edge.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Edge.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Measurement Measurement {
            get {
                return new Root_Query_Measurement();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.BackSplashMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_BackSplashMeasurement BackSplashMeasurement {
            get {
                return new Root_Query_BackSplashMeasurement();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.CounterMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_CounterMeasurement CounterMeasurement {
            get {
                return new Root_Query_CounterMeasurement();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.EdgeMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_EdgeMeasurement EdgeMeasurement {
            get {
                return new Root_Query_EdgeMeasurement();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Measurement<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Measurement..ctor
            /// </summary>
            public Query_Measurement() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement..ctor
            /// </summary>
            public Query_Measurement(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement..ctor
            /// </summary>
            public Query_Measurement(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Length {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Length", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Width {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Width", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Measurement.
            /// </summary>
            public virtual Query_QuoteItem<T1> QuoteItem {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "QuoteItem");
                    Query_QuoteItem<T1> child = new Query_QuoteItem<T1>(null, "QuoteItem", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Measurement : Query_Measurement<StoneHaven.Models.Measurement> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_BackSplashMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_BackSplashMeasurement<T2> : Query_Measurement<T2>
         {
            
            /// <summary>
            /// Query helper for member Query_BackSplashMeasurement..ctor
            /// </summary>
            public Query_BackSplashMeasurement() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_BackSplashMeasurement..ctor
            /// </summary>
            public Query_BackSplashMeasurement(QueryBuilder<T2> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_BackSplashMeasurement..ctor
            /// </summary>
            public Query_BackSplashMeasurement(QueryBuilder<T2> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_BackSplashMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_BackSplashMeasurement : Query_BackSplashMeasurement<StoneHaven.Models.BackSplashMeasurement> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_CounterMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_CounterMeasurement<T3> : Query_Measurement<T3>
         {
            
            /// <summary>
            /// Query helper for member Query_CounterMeasurement..ctor
            /// </summary>
            public Query_CounterMeasurement() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_CounterMeasurement..ctor
            /// </summary>
            public Query_CounterMeasurement(QueryBuilder<T3> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_CounterMeasurement..ctor
            /// </summary>
            public Query_CounterMeasurement(QueryBuilder<T3> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_CounterMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_CounterMeasurement : Query_CounterMeasurement<StoneHaven.Models.CounterMeasurement> {
        }
        
        /// <summary>
        /// Query helper for member Where.Query_EdgeMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_EdgeMeasurement<T4> : Query_Measurement<T4>
         {
            
            /// <summary>
            /// Query helper for member Query_EdgeMeasurement..ctor
            /// </summary>
            public Query_EdgeMeasurement() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_EdgeMeasurement..ctor
            /// </summary>
            public Query_EdgeMeasurement(QueryBuilder<T4> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_EdgeMeasurement..ctor
            /// </summary>
            public Query_EdgeMeasurement(QueryBuilder<T4> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_EdgeMeasurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_EdgeMeasurement : Query_EdgeMeasurement<StoneHaven.Models.EdgeMeasurement> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Measurement {
            
            /// <summary>
            /// Query helper for member Measurement.Length
            /// </summary>
            public static OrderByClause Length {
                get {
                    return new OrderByClause("Length");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Width
            /// </summary>
            public static OrderByClause Width {
                get {
                    return new OrderByClause("Width");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Measurement {
            
            /// <summary>
            /// Query helper for member Measurement.Length
            /// </summary>
            public static NumericPropertyProjectionBuilder Length {
                get {
                    return new NumericPropertyProjectionBuilder("Length");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Width
            /// </summary>
            public static NumericPropertyProjectionBuilder Width {
                get {
                    return new NumericPropertyProjectionBuilder("Width");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Measurement
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Measurement {
            
            /// <summary>
            /// Query helper for member Measurement.Length
            /// </summary>
            public static NHibernate.Criterion.IProjection Length {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Length");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Width
            /// </summary>
            public static NHibernate.Criterion.IProjection Width {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Width");
                }
            }
            
            /// <summary>
            /// Query helper for member Measurement.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Job Job {
            get {
                return new Root_Query_Job();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Job<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Job..ctor
            /// </summary>
            public Query_Job() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Job..ctor
            /// </summary>
            public Query_Job(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Job..ctor
            /// </summary>
            public Query_Job(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> JobNr {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "JobNr", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> InvoiceNr {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "InvoiceNr", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Status {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Status", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreateDate {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreateDate", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> TemplateDate {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "TemplateDate", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> InstallationDate {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "InstallationDate", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> ServiceDate {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "ServiceDate", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> TemplateBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "TemplateBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> InstallationBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "InstallationBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> ServiceBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "ServiceBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Tax {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Tax", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Deleted {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Deleted", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Total {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Total", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Job.
            /// </summary>
            public virtual Query_Quotation<T1> Quotation {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Quotation");
                    Query_Quotation<T1> child = new Query_Quotation<T1>(null, "Quotation", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_JobItems JobItems {
                get {
                    string temp = associationPath;
                    temp = (temp + ".JobItems");
                    return new Query_Collection_JobItems(this, "JobItems", temp);
                }
            }
            
            public virtual Query_Collection_Deposits Deposits {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Deposits");
                    return new Query_Collection_Deposits(this, "Deposits", temp);
                }
            }
            
            public virtual Query_Collection_JobNotes JobNotes {
                get {
                    string temp = associationPath;
                    temp = (temp + ".JobNotes");
                    return new Query_Collection_JobNotes(this, "JobNotes", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_JobItems : CollectionQueryBuilder<T1> {
                
                public Query_Collection_JobItems(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_JobItem<T1> With() {
                    Query_JobItem<T1> query = new Query_JobItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_JobItem<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_JobItem<T1> query = new Query_JobItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_JobItem<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_JobItem<T1> query = new Query_JobItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_JobItem<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_JobItem<T1> query = new Query_JobItem<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Deposits : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Deposits(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Deposit<T1> With() {
                    Query_Deposit<T1> query = new Query_Deposit<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Deposit<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Deposit<T1> query = new Query_Deposit<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Deposit<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Deposit<T1> query = new Query_Deposit<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Deposit<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Deposit<T1> query = new Query_Deposit<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_JobNotes : CollectionQueryBuilder<T1> {
                
                public Query_Collection_JobNotes(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Note<T1> With() {
                    Query_Note<T1> query = new Query_Note<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Note<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Note<T1> query = new Query_Note<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Note<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Note<T1> query = new Query_Note<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Note<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Note<T1> query = new Query_Note<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Job : Query_Job<StoneHaven.Models.Job> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Job {
            
            /// <summary>
            /// Query helper for member Job.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.JobNr
            /// </summary>
            public static OrderByClause JobNr {
                get {
                    return new OrderByClause("JobNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InvoiceNr
            /// </summary>
            public static OrderByClause InvoiceNr {
                get {
                    return new OrderByClause("InvoiceNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Status
            /// </summary>
            public static OrderByClause Status {
                get {
                    return new OrderByClause("Status");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreateDate
            /// </summary>
            public static OrderByClause CreateDate {
                get {
                    return new OrderByClause("CreateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateDate
            /// </summary>
            public static OrderByClause TemplateDate {
                get {
                    return new OrderByClause("TemplateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationDate
            /// </summary>
            public static OrderByClause InstallationDate {
                get {
                    return new OrderByClause("InstallationDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceDate
            /// </summary>
            public static OrderByClause ServiceDate {
                get {
                    return new OrderByClause("ServiceDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateBy
            /// </summary>
            public static OrderByClause TemplateBy {
                get {
                    return new OrderByClause("TemplateBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationBy
            /// </summary>
            public static OrderByClause InstallationBy {
                get {
                    return new OrderByClause("InstallationBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceBy
            /// </summary>
            public static OrderByClause ServiceBy {
                get {
                    return new OrderByClause("ServiceBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Tax
            /// </summary>
            public static OrderByClause Tax {
                get {
                    return new OrderByClause("Tax");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Deleted
            /// </summary>
            public static OrderByClause Deleted {
                get {
                    return new OrderByClause("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Total
            /// </summary>
            public static OrderByClause Total {
                get {
                    return new OrderByClause("Total");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Job {
            
            /// <summary>
            /// Query helper for member Job.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.JobNr
            /// </summary>
            public static NumericPropertyProjectionBuilder JobNr {
                get {
                    return new NumericPropertyProjectionBuilder("JobNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InvoiceNr
            /// </summary>
            public static PropertyProjectionBuilder InvoiceNr {
                get {
                    return new PropertyProjectionBuilder("InvoiceNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Status
            /// </summary>
            public static PropertyProjectionBuilder Status {
                get {
                    return new PropertyProjectionBuilder("Status");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreateDate
            /// </summary>
            public static PropertyProjectionBuilder CreateDate {
                get {
                    return new PropertyProjectionBuilder("CreateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateDate
            /// </summary>
            public static PropertyProjectionBuilder TemplateDate {
                get {
                    return new PropertyProjectionBuilder("TemplateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationDate
            /// </summary>
            public static PropertyProjectionBuilder InstallationDate {
                get {
                    return new PropertyProjectionBuilder("InstallationDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceDate
            /// </summary>
            public static PropertyProjectionBuilder ServiceDate {
                get {
                    return new PropertyProjectionBuilder("ServiceDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateBy
            /// </summary>
            public static PropertyProjectionBuilder TemplateBy {
                get {
                    return new PropertyProjectionBuilder("TemplateBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationBy
            /// </summary>
            public static PropertyProjectionBuilder InstallationBy {
                get {
                    return new PropertyProjectionBuilder("InstallationBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceBy
            /// </summary>
            public static PropertyProjectionBuilder ServiceBy {
                get {
                    return new PropertyProjectionBuilder("ServiceBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Tax
            /// </summary>
            public static NumericPropertyProjectionBuilder Tax {
                get {
                    return new NumericPropertyProjectionBuilder("Tax");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Deleted
            /// </summary>
            public static PropertyProjectionBuilder Deleted {
                get {
                    return new PropertyProjectionBuilder("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Total
            /// </summary>
            public static NumericPropertyProjectionBuilder Total {
                get {
                    return new NumericPropertyProjectionBuilder("Total");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Job
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Job {
            
            /// <summary>
            /// Query helper for member Job.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.JobNr
            /// </summary>
            public static NHibernate.Criterion.IProjection JobNr {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("JobNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InvoiceNr
            /// </summary>
            public static NHibernate.Criterion.IProjection InvoiceNr {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("InvoiceNr");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Status
            /// </summary>
            public static NHibernate.Criterion.IProjection Status {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Status");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.CreateDate
            /// </summary>
            public static NHibernate.Criterion.IProjection CreateDate {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateDate
            /// </summary>
            public static NHibernate.Criterion.IProjection TemplateDate {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("TemplateDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationDate
            /// </summary>
            public static NHibernate.Criterion.IProjection InstallationDate {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("InstallationDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceDate
            /// </summary>
            public static NHibernate.Criterion.IProjection ServiceDate {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("ServiceDate");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.TemplateBy
            /// </summary>
            public static NHibernate.Criterion.IProjection TemplateBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("TemplateBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.InstallationBy
            /// </summary>
            public static NHibernate.Criterion.IProjection InstallationBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("InstallationBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.ServiceBy
            /// </summary>
            public static NHibernate.Criterion.IProjection ServiceBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("ServiceBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Tax
            /// </summary>
            public static NHibernate.Criterion.IProjection Tax {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Tax");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Deleted
            /// </summary>
            public static NHibernate.Criterion.IProjection Deleted {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Deleted");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Total
            /// </summary>
            public static NHibernate.Criterion.IProjection Total {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Total");
                }
            }
            
            /// <summary>
            /// Query helper for member Job.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Note Note {
            get {
                return new Root_Query_Note();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Note<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Note..ctor
            /// </summary>
            public Query_Note() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Note..ctor
            /// </summary>
            public Query_Note(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Note..ctor
            /// </summary>
            public Query_Note(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Date {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Date", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual Query_Note<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Note<T1> child = new Query_Note<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Note.
            /// </summary>
            public virtual Query_Job<T1> Job {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Job");
                    Query_Job<T1> child = new Query_Job<T1>(null, "Job", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Note : Query_Note<StoneHaven.Models.Note> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Note {
            
            /// <summary>
            /// Query helper for member Note.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Date
            /// </summary>
            public static OrderByClause Date {
                get {
                    return new OrderByClause("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Note {
            
            /// <summary>
            /// Query helper for member Note.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Date
            /// </summary>
            public static PropertyProjectionBuilder Date {
                get {
                    return new PropertyProjectionBuilder("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Note
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Note {
            
            /// <summary>
            /// Query helper for member Note.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Date
            /// </summary>
            public static NHibernate.Criterion.IProjection Date {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Date");
                }
            }
            
            /// <summary>
            /// Query helper for member Note.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_JobItem JobItem {
            get {
                return new Root_Query_JobItem();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_JobItem<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_JobItem..ctor
            /// </summary>
            public Query_JobItem() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem..ctor
            /// </summary>
            public Query_JobItem(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem..ctor
            /// </summary>
            public Query_JobItem(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Backsplash {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Backsplash", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> TagNr {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "TagNr", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> NrOfSlabs {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "NrOfSlabs", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> SinkLocation {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "SinkLocation", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual Query_Job<T1> Job {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Job");
                    Query_Job<T1> child = new Query_Job<T1>(null, "Job", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual Query_ColorGroup<T1> FinalColorGroup {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "FinalColorGroup");
                    Query_ColorGroup<T1> child = new Query_ColorGroup<T1>(null, "FinalColorGroup", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual Query_Edge<T1> FinalEdge {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "FinalEdge");
                    Query_Edge<T1> child = new Query_Edge<T1>(null, "FinalEdge", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_JobItem.
            /// </summary>
            public virtual Query_Thicknes<T1> FinalThicknes {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "FinalThicknes");
                    Query_Thicknes<T1> child = new Query_Thicknes<T1>(null, "FinalThicknes", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_JobItem : Query_JobItem<StoneHaven.Models.JobItem> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class JobItem {
            
            /// <summary>
            /// Query helper for member JobItem.Backsplash
            /// </summary>
            public static OrderByClause Backsplash {
                get {
                    return new OrderByClause("Backsplash");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.TagNr
            /// </summary>
            public static OrderByClause TagNr {
                get {
                    return new OrderByClause("TagNr");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.NrOfSlabs
            /// </summary>
            public static OrderByClause NrOfSlabs {
                get {
                    return new OrderByClause("NrOfSlabs");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.SinkLocation
            /// </summary>
            public static OrderByClause SinkLocation {
                get {
                    return new OrderByClause("SinkLocation");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class JobItem {
            
            /// <summary>
            /// Query helper for member JobItem.Backsplash
            /// </summary>
            public static PropertyProjectionBuilder Backsplash {
                get {
                    return new PropertyProjectionBuilder("Backsplash");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.TagNr
            /// </summary>
            public static NumericPropertyProjectionBuilder TagNr {
                get {
                    return new NumericPropertyProjectionBuilder("TagNr");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.NrOfSlabs
            /// </summary>
            public static NumericPropertyProjectionBuilder NrOfSlabs {
                get {
                    return new NumericPropertyProjectionBuilder("NrOfSlabs");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.SinkLocation
            /// </summary>
            public static PropertyProjectionBuilder SinkLocation {
                get {
                    return new PropertyProjectionBuilder("SinkLocation");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.JobItem
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class JobItem {
            
            /// <summary>
            /// Query helper for member JobItem.Backsplash
            /// </summary>
            public static NHibernate.Criterion.IProjection Backsplash {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Backsplash");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.TagNr
            /// </summary>
            public static NHibernate.Criterion.IProjection TagNr {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("TagNr");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.NrOfSlabs
            /// </summary>
            public static NHibernate.Criterion.IProjection NrOfSlabs {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("NrOfSlabs");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.SinkLocation
            /// </summary>
            public static NHibernate.Criterion.IProjection SinkLocation {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("SinkLocation");
                }
            }
            
            /// <summary>
            /// Query helper for member JobItem.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Deposit Deposit {
            get {
                return new Root_Query_Deposit();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Deposit<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Deposit..ctor
            /// </summary>
            public Query_Deposit() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit..ctor
            /// </summary>
            public Query_Deposit(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit..ctor
            /// </summary>
            public Query_Deposit(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Amount {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Amount", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> PaidOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "PaidOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Deposit.
            /// </summary>
            public virtual Query_Job<T1> Job {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Job");
                    Query_Job<T1> child = new Query_Job<T1>(null, "Job", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Deposit : Query_Deposit<StoneHaven.Models.Deposit> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Deposit {
            
            /// <summary>
            /// Query helper for member Deposit.Amount
            /// </summary>
            public static OrderByClause Amount {
                get {
                    return new OrderByClause("Amount");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.PaidOn
            /// </summary>
            public static OrderByClause PaidOn {
                get {
                    return new OrderByClause("PaidOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Deposit {
            
            /// <summary>
            /// Query helper for member Deposit.Amount
            /// </summary>
            public static NumericPropertyProjectionBuilder Amount {
                get {
                    return new NumericPropertyProjectionBuilder("Amount");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.PaidOn
            /// </summary>
            public static PropertyProjectionBuilder PaidOn {
                get {
                    return new PropertyProjectionBuilder("PaidOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Deposit
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Deposit {
            
            /// <summary>
            /// Query helper for member Deposit.Amount
            /// </summary>
            public static NHibernate.Criterion.IProjection Amount {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Amount");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.PaidOn
            /// </summary>
            public static NHibernate.Criterion.IProjection PaidOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("PaidOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Deposit.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Sink Sink {
            get {
                return new Root_Query_Sink();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Sink<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Sink..ctor
            /// </summary>
            public Query_Sink() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Sink..ctor
            /// </summary>
            public Query_Sink(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Sink..ctor
            /// </summary>
            public Query_Sink(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Sink.
            /// </summary>
            public virtual Query_Sink<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_Sink<T1> child = new Query_Sink<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            public virtual Query_Collection_Prices Prices {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Prices");
                    return new Query_Collection_Prices(this, "Prices", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_Sink<T1> With() {
                    Query_Sink<T1> query = new Query_Sink<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Sink<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_Sink<T1> query = new Query_Sink<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Sink<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_Sink<T1> query = new Query_Sink<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_Sink<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_Sink<T1> query = new Query_Sink<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Prices : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Prices(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_SinkPrice<T1> With() {
                    Query_SinkPrice<T1> query = new Query_SinkPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_SinkPrice<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_SinkPrice<T1> query = new Query_SinkPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_SinkPrice<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_SinkPrice<T1> query = new Query_SinkPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_SinkPrice<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_SinkPrice<T1> query = new Query_SinkPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Sink : Query_Sink<StoneHaven.Models.Sink> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Sink {
            
            /// <summary>
            /// Query helper for member Sink.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Sink {
            
            /// <summary>
            /// Query helper for member Sink.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Sink
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Sink {
            
            /// <summary>
            /// Query helper for member Sink.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member Sink.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_ColorGroup ColorGroup {
            get {
                return new Root_Query_ColorGroup();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_ColorGroup<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_ColorGroup..ctor
            /// </summary>
            public Query_ColorGroup() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup..ctor
            /// </summary>
            public Query_ColorGroup(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup..ctor
            /// </summary>
            public Query_ColorGroup(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Description {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Description", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_ColorGroup.
            /// </summary>
            public virtual Query_ColorGroup<T1> Parent {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "Parent");
                    Query_ColorGroup<T1> child = new Query_ColorGroup<T1>(null, "Parent", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            public virtual Query_Collection_Childrens Childrens {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Childrens");
                    return new Query_Collection_Childrens(this, "Childrens", temp);
                }
            }
            
            public virtual Query_Collection_Prices Prices {
                get {
                    string temp = associationPath;
                    temp = (temp + ".Prices");
                    return new Query_Collection_Prices(this, "Prices", temp);
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Childrens : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Childrens(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_ColorGroup<T1> With() {
                    Query_ColorGroup<T1> query = new Query_ColorGroup<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroup<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_ColorGroup<T1> query = new Query_ColorGroup<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroup<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_ColorGroup<T1> query = new Query_ColorGroup<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroup<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_ColorGroup<T1> query = new Query_ColorGroup<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
            
            [System.CLSCompliantAttribute(false)]
            [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
            public class Query_Collection_Prices : CollectionQueryBuilder<T1> {
                
                public Query_Collection_Prices(QueryBuilder<T1> parent, string name, string associationPath) : 
                        base(parent, name, associationPath) {
                }
                
                public virtual Query_ColorGroupPrice<T1> With() {
                    Query_ColorGroupPrice<T1> query = new Query_ColorGroupPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroupPrice<T1> With(NHibernate.SqlCommand.JoinType joinType) {
                    Query_ColorGroupPrice<T1> query = new Query_ColorGroupPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = NHibernate.FetchMode.Default;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroupPrice<T1> With(NHibernate.FetchMode fetchMode) {
                    Query_ColorGroupPrice<T1> query = new Query_ColorGroupPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = NHibernate.SqlCommand.JoinType.InnerJoin;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
                
                public virtual Query_ColorGroupPrice<T1> With(NHibernate.SqlCommand.JoinType joinType, NHibernate.FetchMode fetchMode) {
                    Query_ColorGroupPrice<T1> query = new Query_ColorGroupPrice<T1>(this, this.myName, this.associationPath);
                    query.joinType = joinType;
                    query.fetchMode = fetchMode;
                    query.ShouldSkipJoinOnIdEquality = true;
                    return query;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_ColorGroup : Query_ColorGroup<StoneHaven.Models.ColorGroup> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ColorGroup {
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Description
            /// </summary>
            public static OrderByClause Description {
                get {
                    return new OrderByClause("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ColorGroup {
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Description
            /// </summary>
            public static PropertyProjectionBuilder Description {
                get {
                    return new PropertyProjectionBuilder("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.ColorGroup
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class ColorGroup {
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Description
            /// </summary>
            public static NHibernate.Criterion.IProjection Description {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Description");
                }
            }
            
            /// <summary>
            /// Query helper for member ColorGroup.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_Customer Customer {
            get {
                return new Root_Query_Customer();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_Customer<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_Customer..ctor
            /// </summary>
            public Query_Customer() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_Customer..ctor
            /// </summary>
            public Query_Customer(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_Customer..ctor
            /// </summary>
            public Query_Customer(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CustomerName {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CustomerName", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Address {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Address", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> PostalCode {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "PostalCode", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Phone {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Phone", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> PhoneExt {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "PhoneExt", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Fax {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Fax", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_Customer.
            /// </summary>
            public virtual Query_City<T1> City {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "City");
                    Query_City<T1> child = new Query_City<T1>(null, "City", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_Customer : Query_Customer<StoneHaven.Models.Customer> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Customer {
            
            /// <summary>
            /// Query helper for member Customer.CustomerName
            /// </summary>
            public static OrderByClause CustomerName {
                get {
                    return new OrderByClause("CustomerName");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Address
            /// </summary>
            public static OrderByClause Address {
                get {
                    return new OrderByClause("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PostalCode
            /// </summary>
            public static OrderByClause PostalCode {
                get {
                    return new OrderByClause("PostalCode");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Phone
            /// </summary>
            public static OrderByClause Phone {
                get {
                    return new OrderByClause("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PhoneExt
            /// </summary>
            public static OrderByClause PhoneExt {
                get {
                    return new OrderByClause("PhoneExt");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Fax
            /// </summary>
            public static OrderByClause Fax {
                get {
                    return new OrderByClause("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Customer {
            
            /// <summary>
            /// Query helper for member Customer.CustomerName
            /// </summary>
            public static PropertyProjectionBuilder CustomerName {
                get {
                    return new PropertyProjectionBuilder("CustomerName");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Address
            /// </summary>
            public static PropertyProjectionBuilder Address {
                get {
                    return new PropertyProjectionBuilder("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PostalCode
            /// </summary>
            public static PropertyProjectionBuilder PostalCode {
                get {
                    return new PropertyProjectionBuilder("PostalCode");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Phone
            /// </summary>
            public static PropertyProjectionBuilder Phone {
                get {
                    return new PropertyProjectionBuilder("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PhoneExt
            /// </summary>
            public static PropertyProjectionBuilder PhoneExt {
                get {
                    return new PropertyProjectionBuilder("PhoneExt");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Fax
            /// </summary>
            public static PropertyProjectionBuilder Fax {
                get {
                    return new PropertyProjectionBuilder("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.Customer
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Customer {
            
            /// <summary>
            /// Query helper for member Customer.CustomerName
            /// </summary>
            public static NHibernate.Criterion.IProjection CustomerName {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CustomerName");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Address
            /// </summary>
            public static NHibernate.Criterion.IProjection Address {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Address");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PostalCode
            /// </summary>
            public static NHibernate.Criterion.IProjection PostalCode {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("PostalCode");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Phone
            /// </summary>
            public static NHibernate.Criterion.IProjection Phone {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Phone");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.PhoneExt
            /// </summary>
            public static NHibernate.Criterion.IProjection PhoneExt {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("PhoneExt");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Fax
            /// </summary>
            public static NHibernate.Criterion.IProjection Fax {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Fax");
                }
            }
            
            /// <summary>
            /// Query helper for member Customer.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_City City {
            get {
                return new Root_Query_City();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_City<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_City..ctor
            /// </summary>
            public Query_City() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_City..ctor
            /// </summary>
            public Query_City(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_City..ctor
            /// </summary>
            public Query_City(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_City.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Name {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Name", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_City.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_City : Query_City<StoneHaven.Models.City> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class City {
            
            /// <summary>
            /// Query helper for member City.Name
            /// </summary>
            public static OrderByClause Name {
                get {
                    return new OrderByClause("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member City.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class City {
            
            /// <summary>
            /// Query helper for member City.Name
            /// </summary>
            public static PropertyProjectionBuilder Name {
                get {
                    return new PropertyProjectionBuilder("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member City.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.City
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class City {
            
            /// <summary>
            /// Query helper for member City.Name
            /// </summary>
            public static NHibernate.Criterion.IProjection Name {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Name");
                }
            }
            
            /// <summary>
            /// Query helper for member City.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 8/26/2009 8:47:58 PM
// This source code was auto-generated by NHQG (NHQG), Version 2.0.0.0.
// 
namespace Query {
    
    
    public partial class Where {
        
        /// <summary>
        /// Query helper for member Where.UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public static Root_Query_UserMessage UserMessage {
            get {
                return new Root_Query_UserMessage();
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Query_UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Query_UserMessage<T1> : QueryBuilder<T1>
         {
            
            /// <summary>
            /// Query helper for member Query_UserMessage..ctor
            /// </summary>
            public Query_UserMessage() : 
                    this(null, "this", null) {
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage..ctor
            /// </summary>
            public Query_UserMessage(QueryBuilder<T1> parent, string name, string associationPath) : 
                    base(parent, name, associationPath) {
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage..ctor
            /// </summary>
            public Query_UserMessage(QueryBuilder<T1> parent, string name, string associationPath, bool backTrackAssociationOnEquality) : 
                    base(parent, name, associationPath, backTrackAssociationOnEquality) {
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> CreatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "CreatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedBy {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedBy", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> LastUpdatedOn {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "LastUpdatedOn", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> Message {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "Message", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual PropertyQueryBuilder<T1> IsNew {
                get {
                    string temp = associationPath;
                    PropertyQueryBuilder<T1> child = new PropertyQueryBuilder<T1>(null, "IsNew", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual IdQueryBuilder<T1> Id {
                get {
                    string temp = associationPath;
                    IdQueryBuilder<T1> child = new IdQueryBuilder<T1>(null, "Id", temp);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual Query_User<T1> From {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "From");
                    Query_User<T1> child = new Query_User<T1>(null, "From", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
            
            /// <summary>
            /// Query helper for member Query_UserMessage.
            /// </summary>
            public virtual Query_User<T1> To {
                get {
                    string temp = associationPath;
                    temp = ((temp + ".") 
                                + "To");
                    Query_User<T1> child = new Query_User<T1>(null, "To", temp, true);
                    child.ShouldSkipJoinOnIdEquality = this.ShouldSkipJoinOnIdEquality;
                    return child;
                }
            }
        }
        
        /// <summary>
        /// Query helper for member Where.Root_Query_UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class Root_Query_UserMessage : Query_UserMessage<StoneHaven.Models.UserMessage> {
        }
    }
    
    public partial class OrderBy {
        
        /// <summary>
        /// Query helper for member OrderBy.UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class UserMessage {
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedBy
            /// </summary>
            public static OrderByClause CreatedBy {
                get {
                    return new OrderByClause("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedOn
            /// </summary>
            public static OrderByClause CreatedOn {
                get {
                    return new OrderByClause("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedBy
            /// </summary>
            public static OrderByClause LastUpdatedBy {
                get {
                    return new OrderByClause("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedOn
            /// </summary>
            public static OrderByClause LastUpdatedOn {
                get {
                    return new OrderByClause("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Message
            /// </summary>
            public static OrderByClause Message {
                get {
                    return new OrderByClause("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.IsNew
            /// </summary>
            public static OrderByClause IsNew {
                get {
                    return new OrderByClause("IsNew");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Id
            /// </summary>
            public static OrderByClause Id {
                get {
                    return new OrderByClause("Id");
                }
            }
        }
    }
    
    public partial class ProjectBy {
        
        /// <summary>
        /// Query helper for member ProjectBy.UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class UserMessage {
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedBy
            /// </summary>
            public static PropertyProjectionBuilder CreatedBy {
                get {
                    return new PropertyProjectionBuilder("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedOn
            /// </summary>
            public static PropertyProjectionBuilder CreatedOn {
                get {
                    return new PropertyProjectionBuilder("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedBy
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedBy {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedOn
            /// </summary>
            public static PropertyProjectionBuilder LastUpdatedOn {
                get {
                    return new PropertyProjectionBuilder("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Message
            /// </summary>
            public static PropertyProjectionBuilder Message {
                get {
                    return new PropertyProjectionBuilder("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.IsNew
            /// </summary>
            public static PropertyProjectionBuilder IsNew {
                get {
                    return new PropertyProjectionBuilder("IsNew");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Id
            /// </summary>
            public static NumericPropertyProjectionBuilder Id {
                get {
                    return new NumericPropertyProjectionBuilder("Id");
                }
            }
        }
    }
    
    public partial class GroupBy {
        
        /// <summary>
        /// Query helper for member GroupBy.UserMessage
        /// </summary>
        [System.CLSCompliantAttribute(false)]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("NHibernate.Query.Generator", "0.0.0.0")]
        public partial class UserMessage {
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.CreatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection CreatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("CreatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedBy
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedBy {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedBy");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.LastUpdatedOn
            /// </summary>
            public static NHibernate.Criterion.IProjection LastUpdatedOn {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("LastUpdatedOn");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Message
            /// </summary>
            public static NHibernate.Criterion.IProjection Message {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Message");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.IsNew
            /// </summary>
            public static NHibernate.Criterion.IProjection IsNew {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("IsNew");
                }
            }
            
            /// <summary>
            /// Query helper for member UserMessage.Id
            /// </summary>
            public static NHibernate.Criterion.IProjection Id {
                get {
                    return NHibernate.Criterion.Projections.GroupProperty("Id");
                }
            }
        }
    }
}
